/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution
{
public:
  ListNode *reverseLinkedList(ListNode *start)
  {
    ListNode *prev = nullptr;
    while (start)
    {
      ListNode *temp = start->next;
      start->next = prev;
      prev = start;
      start = temp;
    }
    return prev;
  }

  ListNode *getKthNode(ListNode *start, int k)
  {
    k--;
    while (k-- && start)
    {
      start = start->next;
    }

    return start;
  }

  ListNode *reverseKGroup(ListNode *head, int k)
  {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    ListNode *temp = head;
    ListNode *prevLast = nullptr;
    while (temp)
    {
      ListNode *kth = getKthNode(temp, k);
      if (kth == nullptr)
      {
        if (prevLast)
        {
          prevLast->next = temp;
        }
        break;
      }
      ListNode *nextNode = kth->next;
      kth->next = nullptr;
      reverseLinkedList(temp);
      if (temp == head)
      {
        head = kth;
      }
      else
      {
        prevLast->next = kth;
      }
      prevLast = temp;
      temp = nextNode;
    }
    return head;
  }
};