/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution
{
public:
  ListNode *addTwoNumbers(ListNode *l1, ListNode *l2)
  {
    // ListNode* ans = new ListNode();
    ListNode *head = l1;
    int carry = 0;
    ListNode *prev1 = nullptr;
    while (l1 && l2)
    {
      int toAdd = l1->val + l2->val + carry;
      l1->val = toAdd % 10;
      carry = toAdd / 10;
      prev1 = l1;
      l1 = l1->next;
      l2 = l2->next;
    }
    ListNode *prev = nullptr;
    if (l1)
    {
      while (l1)
      {
        int toAdd = l1->val + carry;
        l1->val = toAdd % 10;
        carry = toAdd / 10;
        prev = l1;
        l1 = l1->next;
      }
      if (carry > 0)
      {
        ListNode *car = new ListNode();
        car->val = carry;
        prev->next = car;
      }
    }
    else if (l2)
    {
      prev1->next = l2;
      while (l2)
      {
        int toAdd = l2->val + carry;
        l2->val = toAdd % 10;
        carry = toAdd / 10;
        prev = l2;
        l2 = l2->next;
      }
      if (carry > 0)
      {
        ListNode *car = new ListNode();
        car->val = carry;
        prev->next = car;
      }
    }
    else if (carry > 0)
    {
      ListNode *car = new ListNode();
      car->val = carry;
      prev1->next = car;
    }
    return head;
  }
};