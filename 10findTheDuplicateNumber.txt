
// Will solve it optimally after coming to linked list

//     class Solution
// {
// public:
//   int findDuplicate(vector<int> &nums)
//   {
//     sort(nums.begin(), nums.end());
//     int n = nums.size();
//     for (int i = 1; i < n; i++)
//     {
//       if (nums[i] == nums[i - 1])
//       {
//         return nums[i];
//       }
//     }
//     return 0;
//   }
// };

class Solution
{
public:
  int findDuplicate(vector<int> &nums)
  {
    int slow = nums[0];
    int fast = nums[0];

    while (true)
    {
      slow = nums[slow];
      fast = nums[nums[fast]];

      if (nums[slow] == nums[fast])
      {
        break;
      }
    }

    fast = nums[0];
    while (fast != slow)
    {
      slow = nums[slow];
      fast = nums[fast];
    }
    return slow;
  }
};