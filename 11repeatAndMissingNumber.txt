pair<int, int> missingAndRepeating(vector<int> &arr, int n)
{
  int xr = 0;
  for (int i = 0; i < n; i++)
  {
    xr ^= arr[i] ^ (i + 1);
  }

  // Find the rightmost set bit in xr
  int rightmostSetBit = xr & -xr;

  int missing = 0, repeating = 0;

  for (int i = 0; i < n; i++)
  {
    // Divide numbers into two groups based on rightmost set bit
    if (arr[i] & rightmostSetBit)
    {
      missing ^= arr[i];
    }
    else
    {
      repeating ^= arr[i];
    }
    if ((i + 1) & rightmostSetBit)
    {
      missing ^= (i + 1);
    }
    else
    {
      repeating ^= (i + 1);
    }
  }

  // Check which one is the repeating element
  for (int i = 0; i < n; i++)
  {
    if (arr[i] == repeating)
    {
      return {missing, repeating};
    }
  }

  return {repeating, missing};
}