class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>> &intervals)
    {

        sort(intervals.begin(), intervals.end());

        vector<vector<int>> ans;
        int n = intervals.size();

        // for(int i=1;i<n;i++){
        //     if(intervals[i][0] <= intervals[i-1][1]){
        //         intervals[i][0]=intervals[i-1][0];
        //         intervals[i-1][0]=-1;
        //     }
        //     if(intervals[i-1][1] >= intervals[i][1]){
        //         intervals[i][1]=intervals[i-1][1];
        //         intervals[i-1][1]=-1;
        //     }
        // }

        // for(int i=0;i<n;i++){
        //     vector<int> to_push = {intervals[i][0],intervals[i][1]};
        //     if(intervals[i][0] != -1 && intervals[i][1] != -1){
        //         ans.push_back(to_push);
        //     }
        // }

        ans.push_back({intervals[0][0], intervals[0][1]});
        for (auto &interval : intervals)
        {
            if (interval[0] <= ans.back()[1])
            {
                ans.back()[1] = max(interval[1], ans.back()[1]);
            }
            else
            {
                ans.push_back(interval);
            }
        }

        return ans;
    }
};