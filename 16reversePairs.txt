class Solution
{
public:
  void merge(vector<int> &nums, int low, int mid, int high)
  {
    vector<int> temp;
    int left = low;
    int right = mid + 1;

    while (left <= mid && right <= high)
    {
      if (nums[left] < nums[right])
      {
        temp.push_back(nums[left]);
        left++;
      }
      else
      {
        temp.push_back(nums[right]);
        right++;
      }
    }

    while (left <= mid)
    {
      temp.push_back(nums[left]);
      left++;
    }
    while (right <= high)
    {
      temp.push_back(nums[right]);
      right++;
    }

    for (int i = low; i <= high; i++)
    {
      nums[i] = temp[i - low];
    }
  }
  int countPairs(vector<int> &nums, int low, int mid, int high)
  {
    int ans = 0;
    int j = mid + 1;
    for (int i = low; i <= mid; i++)
    {
      while (j <= high && nums[i] > 2 * (long long)nums[j])
      {
        j++;
      }
      ans += (j - mid - 1);
    }
    return ans;
  }
  int mergeSort(vector<int> &nums, int low, int high)
  {
    int ans = 0;
    int mid = (low + high) / 2;

    if (low == high)
    {
      return ans;
    }

    ans += mergeSort(nums, low, mid);
    ans += mergeSort(nums, mid + 1, high);
    ans += countPairs(nums, low, mid, high);
    merge(nums, low, mid, high);

    return ans;
  }

  int reversePairs(vector<int> &nums)
  {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int n = nums.size();
    return mergeSort(nums, 0, n - 1);
  }
};